/*
 * This file is generated by jOOQ.
 */
package com.bookjob.jooq.generated.tables;


import com.bookjob.jooq.generated.Bookjob;
import com.bookjob.jooq.generated.Indexes;
import com.bookjob.jooq.generated.Keys;
import com.bookjob.jooq.generated.enums.JobPostingEmploymentType;
import com.bookjob.jooq.generated.enums.JobPostingJobCategory;
import com.bookjob.jooq.generated.tables.records.JobPostingRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JobPosting extends TableImpl<JobPostingRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>bookjob.job_posting</code>
     */
    public static final JobPosting JOB_POSTING = new JobPosting();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JobPostingRecord> getRecordType() {
        return JobPostingRecord.class;
    }

    /**
     * The column <code>bookjob.job_posting.id</code>.
     */
    public final TableField<JobPostingRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>bookjob.job_posting.created_at</code>.
     */
    public final TableField<JobPostingRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>bookjob.job_posting.modified_at</code>.
     */
    public final TableField<JobPostingRecord, LocalDateTime> MODIFIED_AT = createField(DSL.name("modified_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>bookjob.job_posting.deleted_at</code>.
     */
    public final TableField<JobPostingRecord, LocalDateTime> DELETED_AT = createField(DSL.name("deleted_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>bookjob.job_posting.closing_date</code>.
     */
    public final TableField<JobPostingRecord, LocalDateTime> CLOSING_DATE = createField(DSL.name("closing_date"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>bookjob.job_posting.employment_type</code>.
     */
    public final TableField<JobPostingRecord, JobPostingEmploymentType> EMPLOYMENT_TYPE = createField(DSL.name("employment_type"), SQLDataType.VARCHAR(9).nullable(false).asEnumDataType(JobPostingEmploymentType.class), this, "");

    /**
     * The column <code>bookjob.job_posting.experience_max</code>.
     */
    public final TableField<JobPostingRecord, Integer> EXPERIENCE_MAX = createField(DSL.name("experience_max"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>bookjob.job_posting.experience_min</code>.
     */
    public final TableField<JobPostingRecord, Integer> EXPERIENCE_MIN = createField(DSL.name("experience_min"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>bookjob.job_posting.is_crawling</code>.
     */
    public final TableField<JobPostingRecord, Boolean> IS_CRAWLING = createField(DSL.name("is_crawling"), SQLDataType.BIT.nullable(false), this, "");

    /**
     * The column <code>bookjob.job_posting.job_category</code>.
     */
    public final TableField<JobPostingRecord, JobPostingJobCategory> JOB_CATEGORY = createField(DSL.name("job_category"), SQLDataType.VARCHAR(11).nullable(false).asEnumDataType(JobPostingJobCategory.class), this, "");

    /**
     * The column <code>bookjob.job_posting.location</code>.
     */
    public final TableField<JobPostingRecord, String> LOCATION = createField(DSL.name("location"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>bookjob.job_posting.member_id</code>.
     */
    public final TableField<JobPostingRecord, Long> MEMBER_ID = createField(DSL.name("member_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>bookjob.job_posting.nickname</code>.
     */
    public final TableField<JobPostingRecord, String> NICKNAME = createField(DSL.name("nickname"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>bookjob.job_posting.text</code>.
     */
    public final TableField<JobPostingRecord, String> TEXT = createField(DSL.name("text"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>bookjob.job_posting.title</code>.
     */
    public final TableField<JobPostingRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>bookjob.job_posting.view_count</code>.
     */
    public final TableField<JobPostingRecord, Integer> VIEW_COUNT = createField(DSL.name("view_count"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>bookjob.job_posting.website_url</code>.
     */
    public final TableField<JobPostingRecord, String> WEBSITE_URL = createField(DSL.name("website_url"), SQLDataType.VARCHAR(255), this, "");

    private JobPosting(Name alias, Table<JobPostingRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JobPosting(Name alias, Table<JobPostingRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>bookjob.job_posting</code> table reference
     */
    public JobPosting(String alias) {
        this(DSL.name(alias), JOB_POSTING);
    }

    /**
     * Create an aliased <code>bookjob.job_posting</code> table reference
     */
    public JobPosting(Name alias) {
        this(alias, JOB_POSTING);
    }

    /**
     * Create a <code>bookjob.job_posting</code> table reference
     */
    public JobPosting() {
        this(DSL.name("job_posting"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Bookjob.BOOKJOB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.JOB_POSTING_IDX_JOB_POSTING_CLOSING_DATE, Indexes.JOB_POSTING_IDX_JOB_POSTING_CREATED_AT);
    }

    @Override
    public Identity<JobPostingRecord, Long> getIdentity() {
        return (Identity<JobPostingRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<JobPostingRecord> getPrimaryKey() {
        return Keys.KEY_JOB_POSTING_PRIMARY;
    }

    @Override
    public JobPosting as(String alias) {
        return new JobPosting(DSL.name(alias), this);
    }

    @Override
    public JobPosting as(Name alias) {
        return new JobPosting(alias, this);
    }

    @Override
    public JobPosting as(Table<?> alias) {
        return new JobPosting(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JobPosting rename(String name) {
        return new JobPosting(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JobPosting rename(Name name) {
        return new JobPosting(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JobPosting rename(Table<?> name) {
        return new JobPosting(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JobPosting where(Condition condition) {
        return new JobPosting(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JobPosting where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JobPosting where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JobPosting where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JobPosting where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JobPosting where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JobPosting where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JobPosting where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JobPosting whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JobPosting whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
