/*
 * This file is generated by jOOQ.
 */
package com.bookjob.jooq.generated.tables.pojos;


import com.bookjob.jooq.generated.enums.JobPostingEmploymentType;
import com.bookjob.jooq.generated.enums.JobPostingJobCategory;

import java.io.Serializable;
import java.time.LocalDateTime;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JobPosting implements Serializable {

    private static final long serialVersionUID = 1L;

    private final Long id;
    private final LocalDateTime createdAt;
    private final LocalDateTime modifiedAt;
    private final LocalDateTime deletedAt;
    private final LocalDateTime closingDate;
    private final JobPostingEmploymentType employmentType;
    private final Integer experienceMax;
    private final Integer experienceMin;
    private final Boolean isCrawling;
    private final JobPostingJobCategory jobCategory;
    private final String location;
    private final Long memberId;
    private final String nickname;
    private final String text;
    private final String title;
    private final Integer viewCount;
    private final String websiteUrl;

    public JobPosting(JobPosting value) {
        this.id = value.id;
        this.createdAt = value.createdAt;
        this.modifiedAt = value.modifiedAt;
        this.deletedAt = value.deletedAt;
        this.closingDate = value.closingDate;
        this.employmentType = value.employmentType;
        this.experienceMax = value.experienceMax;
        this.experienceMin = value.experienceMin;
        this.isCrawling = value.isCrawling;
        this.jobCategory = value.jobCategory;
        this.location = value.location;
        this.memberId = value.memberId;
        this.nickname = value.nickname;
        this.text = value.text;
        this.title = value.title;
        this.viewCount = value.viewCount;
        this.websiteUrl = value.websiteUrl;
    }

    public JobPosting(
        Long id,
        LocalDateTime createdAt,
        LocalDateTime modifiedAt,
        LocalDateTime deletedAt,
        LocalDateTime closingDate,
        JobPostingEmploymentType employmentType,
        Integer experienceMax,
        Integer experienceMin,
        Boolean isCrawling,
        JobPostingJobCategory jobCategory,
        String location,
        Long memberId,
        String nickname,
        String text,
        String title,
        Integer viewCount,
        String websiteUrl
    ) {
        this.id = id;
        this.createdAt = createdAt;
        this.modifiedAt = modifiedAt;
        this.deletedAt = deletedAt;
        this.closingDate = closingDate;
        this.employmentType = employmentType;
        this.experienceMax = experienceMax;
        this.experienceMin = experienceMin;
        this.isCrawling = isCrawling;
        this.jobCategory = jobCategory;
        this.location = location;
        this.memberId = memberId;
        this.nickname = nickname;
        this.text = text;
        this.title = title;
        this.viewCount = viewCount;
        this.websiteUrl = websiteUrl;
    }

    /**
     * Getter for <code>bookjob.job_posting.id</code>.
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Getter for <code>bookjob.job_posting.created_at</code>.
     */
    public LocalDateTime getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Getter for <code>bookjob.job_posting.modified_at</code>.
     */
    public LocalDateTime getModifiedAt() {
        return this.modifiedAt;
    }

    /**
     * Getter for <code>bookjob.job_posting.deleted_at</code>.
     */
    public LocalDateTime getDeletedAt() {
        return this.deletedAt;
    }

    /**
     * Getter for <code>bookjob.job_posting.closing_date</code>.
     */
    public LocalDateTime getClosingDate() {
        return this.closingDate;
    }

    /**
     * Getter for <code>bookjob.job_posting.employment_type</code>.
     */
    public JobPostingEmploymentType getEmploymentType() {
        return this.employmentType;
    }

    /**
     * Getter for <code>bookjob.job_posting.experience_max</code>.
     */
    public Integer getExperienceMax() {
        return this.experienceMax;
    }

    /**
     * Getter for <code>bookjob.job_posting.experience_min</code>.
     */
    public Integer getExperienceMin() {
        return this.experienceMin;
    }

    /**
     * Getter for <code>bookjob.job_posting.is_crawling</code>.
     */
    public Boolean getIsCrawling() {
        return this.isCrawling;
    }

    /**
     * Getter for <code>bookjob.job_posting.job_category</code>.
     */
    public JobPostingJobCategory getJobCategory() {
        return this.jobCategory;
    }

    /**
     * Getter for <code>bookjob.job_posting.location</code>.
     */
    public String getLocation() {
        return this.location;
    }

    /**
     * Getter for <code>bookjob.job_posting.member_id</code>.
     */
    public Long getMemberId() {
        return this.memberId;
    }

    /**
     * Getter for <code>bookjob.job_posting.nickname</code>.
     */
    public String getNickname() {
        return this.nickname;
    }

    /**
     * Getter for <code>bookjob.job_posting.text</code>.
     */
    public String getText() {
        return this.text;
    }

    /**
     * Getter for <code>bookjob.job_posting.title</code>.
     */
    public String getTitle() {
        return this.title;
    }

    /**
     * Getter for <code>bookjob.job_posting.view_count</code>.
     */
    public Integer getViewCount() {
        return this.viewCount;
    }

    /**
     * Getter for <code>bookjob.job_posting.website_url</code>.
     */
    public String getWebsiteUrl() {
        return this.websiteUrl;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final JobPosting other = (JobPosting) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.createdAt == null) {
            if (other.createdAt != null)
                return false;
        }
        else if (!this.createdAt.equals(other.createdAt))
            return false;
        if (this.modifiedAt == null) {
            if (other.modifiedAt != null)
                return false;
        }
        else if (!this.modifiedAt.equals(other.modifiedAt))
            return false;
        if (this.deletedAt == null) {
            if (other.deletedAt != null)
                return false;
        }
        else if (!this.deletedAt.equals(other.deletedAt))
            return false;
        if (this.closingDate == null) {
            if (other.closingDate != null)
                return false;
        }
        else if (!this.closingDate.equals(other.closingDate))
            return false;
        if (this.employmentType == null) {
            if (other.employmentType != null)
                return false;
        }
        else if (!this.employmentType.equals(other.employmentType))
            return false;
        if (this.experienceMax == null) {
            if (other.experienceMax != null)
                return false;
        }
        else if (!this.experienceMax.equals(other.experienceMax))
            return false;
        if (this.experienceMin == null) {
            if (other.experienceMin != null)
                return false;
        }
        else if (!this.experienceMin.equals(other.experienceMin))
            return false;
        if (this.isCrawling == null) {
            if (other.isCrawling != null)
                return false;
        }
        else if (!this.isCrawling.equals(other.isCrawling))
            return false;
        if (this.jobCategory == null) {
            if (other.jobCategory != null)
                return false;
        }
        else if (!this.jobCategory.equals(other.jobCategory))
            return false;
        if (this.location == null) {
            if (other.location != null)
                return false;
        }
        else if (!this.location.equals(other.location))
            return false;
        if (this.memberId == null) {
            if (other.memberId != null)
                return false;
        }
        else if (!this.memberId.equals(other.memberId))
            return false;
        if (this.nickname == null) {
            if (other.nickname != null)
                return false;
        }
        else if (!this.nickname.equals(other.nickname))
            return false;
        if (this.text == null) {
            if (other.text != null)
                return false;
        }
        else if (!this.text.equals(other.text))
            return false;
        if (this.title == null) {
            if (other.title != null)
                return false;
        }
        else if (!this.title.equals(other.title))
            return false;
        if (this.viewCount == null) {
            if (other.viewCount != null)
                return false;
        }
        else if (!this.viewCount.equals(other.viewCount))
            return false;
        if (this.websiteUrl == null) {
            if (other.websiteUrl != null)
                return false;
        }
        else if (!this.websiteUrl.equals(other.websiteUrl))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.createdAt == null) ? 0 : this.createdAt.hashCode());
        result = prime * result + ((this.modifiedAt == null) ? 0 : this.modifiedAt.hashCode());
        result = prime * result + ((this.deletedAt == null) ? 0 : this.deletedAt.hashCode());
        result = prime * result + ((this.closingDate == null) ? 0 : this.closingDate.hashCode());
        result = prime * result + ((this.employmentType == null) ? 0 : this.employmentType.hashCode());
        result = prime * result + ((this.experienceMax == null) ? 0 : this.experienceMax.hashCode());
        result = prime * result + ((this.experienceMin == null) ? 0 : this.experienceMin.hashCode());
        result = prime * result + ((this.isCrawling == null) ? 0 : this.isCrawling.hashCode());
        result = prime * result + ((this.jobCategory == null) ? 0 : this.jobCategory.hashCode());
        result = prime * result + ((this.location == null) ? 0 : this.location.hashCode());
        result = prime * result + ((this.memberId == null) ? 0 : this.memberId.hashCode());
        result = prime * result + ((this.nickname == null) ? 0 : this.nickname.hashCode());
        result = prime * result + ((this.text == null) ? 0 : this.text.hashCode());
        result = prime * result + ((this.title == null) ? 0 : this.title.hashCode());
        result = prime * result + ((this.viewCount == null) ? 0 : this.viewCount.hashCode());
        result = prime * result + ((this.websiteUrl == null) ? 0 : this.websiteUrl.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("JobPosting (");

        sb.append(id);
        sb.append(", ").append(createdAt);
        sb.append(", ").append(modifiedAt);
        sb.append(", ").append(deletedAt);
        sb.append(", ").append(closingDate);
        sb.append(", ").append(employmentType);
        sb.append(", ").append(experienceMax);
        sb.append(", ").append(experienceMin);
        sb.append(", ").append(isCrawling);
        sb.append(", ").append(jobCategory);
        sb.append(", ").append(location);
        sb.append(", ").append(memberId);
        sb.append(", ").append(nickname);
        sb.append(", ").append(text);
        sb.append(", ").append(title);
        sb.append(", ").append(viewCount);
        sb.append(", ").append(websiteUrl);

        sb.append(")");
        return sb.toString();
    }
}
