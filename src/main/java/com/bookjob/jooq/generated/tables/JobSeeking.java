/*
 * This file is generated by jOOQ.
 */
package com.bookjob.jooq.generated.tables;


import com.bookjob.jooq.generated.Bookjob;
import com.bookjob.jooq.generated.Keys;
import com.bookjob.jooq.generated.enums.JobSeekingEmploymentType;
import com.bookjob.jooq.generated.enums.JobSeekingJobCategory;
import com.bookjob.jooq.generated.tables.records.JobSeekingRecord;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JobSeeking extends TableImpl<JobSeekingRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>bookjob.job_seeking</code>
     */
    public static final JobSeeking JOB_SEEKING = new JobSeeking();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JobSeekingRecord> getRecordType() {
        return JobSeekingRecord.class;
    }

    /**
     * The column <code>bookjob.job_seeking.id</code>.
     */
    public final TableField<JobSeekingRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>bookjob.job_seeking.created_at</code>.
     */
    public final TableField<JobSeekingRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>bookjob.job_seeking.modified_at</code>.
     */
    public final TableField<JobSeekingRecord, LocalDateTime> MODIFIED_AT = createField(DSL.name("modified_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>bookjob.job_seeking.deleted_at</code>.
     */
    public final TableField<JobSeekingRecord, LocalDateTime> DELETED_AT = createField(DSL.name("deleted_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>bookjob.job_seeking.contact_email</code>.
     */
    public final TableField<JobSeekingRecord, String> CONTACT_EMAIL = createField(DSL.name("contact_email"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>bookjob.job_seeking.employment_type</code>.
     */
    public final TableField<JobSeekingRecord, JobSeekingEmploymentType> EMPLOYMENT_TYPE = createField(DSL.name("employment_type"), SQLDataType.VARCHAR(9).nullable(false).asEnumDataType(JobSeekingEmploymentType.class), this, "");

    /**
     * The column <code>bookjob.job_seeking.experience</code>.
     */
    public final TableField<JobSeekingRecord, String> EXPERIENCE = createField(DSL.name("experience"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>bookjob.job_seeking.job_category</code>.
     */
    public final TableField<JobSeekingRecord, JobSeekingJobCategory> JOB_CATEGORY = createField(DSL.name("job_category"), SQLDataType.VARCHAR(11).nullable(false).asEnumDataType(JobSeekingJobCategory.class), this, "");

    /**
     * The column <code>bookjob.job_seeking.member_id</code>.
     */
    public final TableField<JobSeekingRecord, Long> MEMBER_ID = createField(DSL.name("member_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>bookjob.job_seeking.nickname</code>.
     */
    public final TableField<JobSeekingRecord, String> NICKNAME = createField(DSL.name("nickname"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>bookjob.job_seeking.text</code>.
     */
    public final TableField<JobSeekingRecord, String> TEXT = createField(DSL.name("text"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>bookjob.job_seeking.title</code>.
     */
    public final TableField<JobSeekingRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>bookjob.job_seeking.view_count</code>.
     */
    public final TableField<JobSeekingRecord, Integer> VIEW_COUNT = createField(DSL.name("view_count"), SQLDataType.INTEGER.nullable(false), this, "");

    private JobSeeking(Name alias, Table<JobSeekingRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JobSeeking(Name alias, Table<JobSeekingRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>bookjob.job_seeking</code> table reference
     */
    public JobSeeking(String alias) {
        this(DSL.name(alias), JOB_SEEKING);
    }

    /**
     * Create an aliased <code>bookjob.job_seeking</code> table reference
     */
    public JobSeeking(Name alias) {
        this(alias, JOB_SEEKING);
    }

    /**
     * Create a <code>bookjob.job_seeking</code> table reference
     */
    public JobSeeking() {
        this(DSL.name("job_seeking"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Bookjob.BOOKJOB;
    }

    @Override
    public Identity<JobSeekingRecord, Long> getIdentity() {
        return (Identity<JobSeekingRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<JobSeekingRecord> getPrimaryKey() {
        return Keys.KEY_JOB_SEEKING_PRIMARY;
    }

    @Override
    public JobSeeking as(String alias) {
        return new JobSeeking(DSL.name(alias), this);
    }

    @Override
    public JobSeeking as(Name alias) {
        return new JobSeeking(alias, this);
    }

    @Override
    public JobSeeking as(Table<?> alias) {
        return new JobSeeking(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JobSeeking rename(String name) {
        return new JobSeeking(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JobSeeking rename(Name name) {
        return new JobSeeking(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JobSeeking rename(Table<?> name) {
        return new JobSeeking(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JobSeeking where(Condition condition) {
        return new JobSeeking(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JobSeeking where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JobSeeking where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JobSeeking where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JobSeeking where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JobSeeking where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JobSeeking where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JobSeeking where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JobSeeking whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JobSeeking whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
