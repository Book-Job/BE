/*
 * This file is generated by jOOQ.
 */
package com.bookjob.jooq.generated.tables;


import com.bookjob.jooq.generated.Bookjob;
import com.bookjob.jooq.generated.Keys;
import com.bookjob.jooq.generated.enums.EmailVerificationReason;
import com.bookjob.jooq.generated.tables.records.EmailVerificationRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class EmailVerification extends TableImpl<EmailVerificationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>bookjob.email_verification</code>
     */
    public static final EmailVerification EMAIL_VERIFICATION = new EmailVerification();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EmailVerificationRecord> getRecordType() {
        return EmailVerificationRecord.class;
    }

    /**
     * The column <code>bookjob.email_verification.expiration_time</code>.
     */
    public final TableField<EmailVerificationRecord, LocalDateTime> EXPIRATION_TIME = createField(DSL.name("expiration_time"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>bookjob.email_verification.id</code>.
     */
    public final TableField<EmailVerificationRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>bookjob.email_verification.code</code>.
     */
    public final TableField<EmailVerificationRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>bookjob.email_verification.email</code>.
     */
    public final TableField<EmailVerificationRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>bookjob.email_verification.reason</code>.
     */
    public final TableField<EmailVerificationRecord, EmailVerificationReason> REASON = createField(DSL.name("reason"), SQLDataType.VARCHAR(8).nullable(false).asEnumDataType(EmailVerificationReason.class), this, "");

    private EmailVerification(Name alias, Table<EmailVerificationRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private EmailVerification(Name alias, Table<EmailVerificationRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>bookjob.email_verification</code> table reference
     */
    public EmailVerification(String alias) {
        this(DSL.name(alias), EMAIL_VERIFICATION);
    }

    /**
     * Create an aliased <code>bookjob.email_verification</code> table reference
     */
    public EmailVerification(Name alias) {
        this(alias, EMAIL_VERIFICATION);
    }

    /**
     * Create a <code>bookjob.email_verification</code> table reference
     */
    public EmailVerification() {
        this(DSL.name("email_verification"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Bookjob.BOOKJOB;
    }

    @Override
    public Identity<EmailVerificationRecord, Long> getIdentity() {
        return (Identity<EmailVerificationRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<EmailVerificationRecord> getPrimaryKey() {
        return Keys.KEY_EMAIL_VERIFICATION_PRIMARY;
    }

    @Override
    public List<UniqueKey<EmailVerificationRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_EMAIL_VERIFICATION_UKRP5NFRBN3MJDQ2LHD01NU7NE8);
    }

    @Override
    public EmailVerification as(String alias) {
        return new EmailVerification(DSL.name(alias), this);
    }

    @Override
    public EmailVerification as(Name alias) {
        return new EmailVerification(alias, this);
    }

    @Override
    public EmailVerification as(Table<?> alias) {
        return new EmailVerification(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public EmailVerification rename(String name) {
        return new EmailVerification(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EmailVerification rename(Name name) {
        return new EmailVerification(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public EmailVerification rename(Table<?> name) {
        return new EmailVerification(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EmailVerification where(Condition condition) {
        return new EmailVerification(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EmailVerification where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EmailVerification where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EmailVerification where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EmailVerification where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EmailVerification where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EmailVerification where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EmailVerification where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EmailVerification whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EmailVerification whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
