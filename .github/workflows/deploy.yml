name: Build and Deploy to EC2 with Predefined Environment Variables

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev
    types:
      - closed

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Check out code
        uses: actions/checkout@v3

      # 2. Java 21 설치 (openjdk)
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: 21
          distribution: 'openjdk'

      # 3. Gradle 실행 권한 부여
      - name: Grant execute permission for gradlew
        working-directory: backend
        run: chmod +x ./gradlew

      # 4. Build 수행
      - name: Build
        working-directory: backend
        env:
          DB_URL: ${{ secrets.DB_URL }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          echo "Building the project..."
          ./gradlew clean build -x test \
            -DdbUrl=${{ secrets.DB_URL }} \
            -DdbUsername=${{ secrets.DB_USERNAME }} \
            -DdbPassword=${{ secrets.DB_PASSWORD }}
          echo "Build completed successfully."

      # 5. EC2 배포 및 실행
      - name: Deploy and Start Application on EC2-1
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_PROD }}
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            echo "Deploying application on EC2-1..."
            mkdir -p /home/ubuntu/deployments
            echo "Directory created successfully."

            echo "Uploading JAR file to EC2..."
            scp -i ~/.ssh/id_rsa backend/build/libs/backend-0.0.1-SNAPSHOT.jar ubuntu@${{ secrets.HOST_PROD }}:/home/ubuntu/deployments/

            echo "Checking for existing application on EC2-1..."
            if lsof -i:8080; then
              PID=$(lsof -t -i:8080)
              echo "Found process on port 8080 with PID: $PID. Stopping it..."
              kill -9 $PID
              sleep 5
              echo "Application stopped successfully."
            else
              echo "No application running on port 8080."
            fi

            echo "Starting new application on EC2-1..."
            nohup java \
              -javaagent:/home/ubuntu/scouter/agent.java/scouter.agent.jar \
              -Dscouter.config=/home/ubuntu/scouter/agent.java/conf/scouter.conf \
              -Dspring.profiles.active=aws \
              -Dspring.datasource.url=${{ secrets.DB_URL }} \
              -Dspring.datasource.username=${{ secrets.DB_USERNAME }} \
              -Dspring.datasource.password=${{ secrets.DB_PASSWORD }} \
              -DAWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
              -DAWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
              -DAWS_REGION=${{ secrets.AWS_REGION }} \
              -DS3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME}} \
              -DJWT_SECRET=${{ secrets.JWT_SECRET}} \
              -jar /home/ubuntu/deployments/backend-0.0.1-SNAPSHOT.jar > /home/ubuntu/deployments/app.log 2>&1 &
            echo "Application started successfully on EC2-1."

            echo "Sleeping for 30 seconds to allow the application to initialize..."
            sleep 30

            echo "Checking the log file..."
            if [ -f /home/ubuntu/deployments/app.log ]; then
              echo "Log file exists. Displaying the last 10 lines:"
              tail -n 10 /home/ubuntu/deployments/app.log
            else
              echo "Log file not found. Application might have failed to start."
              exit 1
            fi
